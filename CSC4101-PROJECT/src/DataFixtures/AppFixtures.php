<?php

namespace App\DataFixtures;

use Doctrine\Bundle\FixturesBundle\Fixture;
use Doctrine\Persistence\ObjectManager;
use App\Entity\Territories;
use App\Repository\TerritoriesRepository;
use App\Entity\Exoplanet;

class AppFixtures extends Fixture
{
    // defines reference names for instances of Rack
    private const SPACEXPLANETS = "SpaceX's Territories";
    private const ESAPLANETS = "ESA's Territories";
    private const NASAPLANETS = "NASA's Territories";
    /**
     * Generates initialization data for Territories : [description, territories reference]
     * @return \\Generator
     */
    private static function territoriesDataGenerator()
    {
        yield ["Possesions d'E.Musk", self::SPACEXPLANETS];
        yield ["Terrain de 'recherche' de l'UE", self::ESAPLANETS];
        yield ["Nouveaux Etats des USA",self::NASAPLANETS];
    }
    
    /**
     * Generates initialization data for exoplanet :
     *  [territories reference, exoplanet description]
     * @return \\Generator
     */
    private static function exoplanetDataGenerator()
    {
        yield [self::SPACEXPLANETS, "E16 Cygni Bb"];
        yield [self::ESAPLANETS, "HD 178911 Bb"];
        yield [self::NASAPLANETS, "51 Peg b"];
    }
    
    public function load(ObjectManager $manager)
    {
        // $inventoryRepo = $manager->getRepository(Territories::class);
        
        foreach (self::territoriesDataGenerator() as [$description, $territoriesReference] ) {
            $territories = new Territories();
            $territories->setDescription($description);
            $manager->persist($territories);
            $manager->flush();
            
            // Once the Territories instance has been saved to DB
            // it has a valid Id generated by Doctrine, and can thus
            // be saved as a future reference
            $this->addReference($territoriesReference, $territories);
        }
        
        foreach (self::exoplanetDataGenerator() as [$territoriesReference, $description])
        {
            // Retrieve the One-side instance of Rack from its reference name
            $territories = $this->getReference($territoriesReference);
            $exoplanet = new Exoplanet();
            $exoplanet->setDescription($description);
            // Add the exoplanets to their owners territories
            $territories->addExoplanet($exoplanet);
            
            // Require that the ORM\OneToMany attribute on Rack::guitars has "cascade: ['persist']"
            $manager->persist($territories);
            dump($territories);
            dump($exoplanet);
        }
        $manager->flush();
    }
}

